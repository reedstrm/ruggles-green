<!--
     Copyright (C) 2011 The CNX Authors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<project name="repository" default="all">
    <!-- TODO(arjuns) : Move generation of classes from build/classes to war/WEB-INF/classes. -->
    <description>
        Build file for CNX Repository.
    </description>
    <property file="build.properties" />

    <!-- Pick up the Ant macros and taskdefs for App Engine -->
    <import file="${third_party}/appengine/appengine-java-sdk-1.5.3/config/user/ant-macros.xml" />

    <target name="war_common"
            depends="compile"
            description="Assemble the application directory">
        <!--delete dir="${war.dir}" /-->
        <mkdir dir="${war.dir}/WEB-INF" />
        <mkdir dir="${war.dir}/WEB-INF/classes" />
        <mkdir dir="${war.dir}/WEB-INF/lib" />

        <copy todir="${war.dir}/WEB-INF">
            <fileset dir="${web.inf.common}" includes="*" />
        </copy>

        <copy todir="${war.dir}/WEB-INF/lib">
            <fileset dir="${output.jars}" includes="*.jar" />
        </copy>

        <copy todir="${war.dir}/WEB-INF/classes">
            <fileset dir="${classdir}" includes="**/*.class" />
        </copy>
    </target>

    <target name="war_prod"
            depends="war_common"
            description="Assemble the application for production deployment.">
        <copy todir="${war.dir}/WEB-INF">
            <fileset dir="${web.inf.prod}">
                <include name="*.xml" />
            </fileset>
        </copy>
        <copy todir="${war.dir}/WEB-INF/classes">
            <fileset dir="${properties.prod}" includes="*.properties" />
        </copy>
    </target>

    <target name="war_qa"
            depends="war_common"
            description="Assemble the application for QA deployment.">
        <copy todir="${war.dir}/WEB-INF">
            <fileset dir="${web.inf.qa}">
                <include name="*.xml" />
            </fileset>
        </copy>
    </target>


    <property name="target_dir" value="${basedir}/${output.jars}" />
    <fileset id="depend_lib" dir="${output.jars}" includes="*.jar" />
    <fileset id="depend_test_lib" dir="${test.lib}" includes="*.jar" />

    <target name="compile"
            description="Compile the application servlet code"
            depends="prepare-for-test-compile">
        <mkdir dir="${classdir}" />
        <mkdir dir="${output.jars}" />

        <ant antfile="appengine/build.xml"
             inheritall="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="appengine/mapreduce/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="asm/build.xml"
             inheritall="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="commons-logging/build.xml"
             inheritall="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="guava/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />

      <ant antfile="jaxb/build.xml"
           inheritAll="true"
           target="default"
           dir="${third_party}" />

        <ant antfile="jdom/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="jersey/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="rome/build.xml"
             inheritall="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="xerces/build.xml"
             inheritall="true"
             target="default"
             dir="${third_party}" />

        <!-- Non third-party dependencies. -->
        <!-- TODO(arjuns) : Common is bringing in libcnxml and libutil. -->

        <ant antfile="build.xml"
             inheritAll="true"
             target="copyjar"
             dir="${basedir}/${commondir}" />

        <ant antfile="build.xml"
             inheritall="true"
             target="copyjar"
             dir="${basedir}/${cnxclient2.dir}" />

        <ant antfile="build.xml"
             inheritall="true"
             target="copyjar"
             dir="${basedir}/${xmls.dir}" />

        <javac srcdir="src"
               destdir="${classdir}"
               includeantruntime="false"
               debug="on"
               failonerror="true">
            <compilerarg line="${javac.flags}" />
            <classpath>
                <resources refid="depend_lib" />
            </classpath>
        </javac>
    </target>

    <target name="prepare-for-test-compile">
        <mkdir dir="${test.outdir}" />
        <mkdir dir="${test.classes}" />


        <property name="test_lib_dir" value="${basedir}/${test.lib}" />
        <ant antfile="appengine/build.xml"
             inheritAll="true"
             target="test"
             dir="${third_party}" />

      <ant antfile="args4j/build.xml"
           inheritAll="true"
           target="test"
           dir="${third_party}" />
        	
        <ant antfile="jersey/build.xml"
             inheritAll="true"
             target="test"
             dir="${third_party}" />

        <ant antfile="junit/build.xml"
             inheritAll="true"
             target="test"
             dir="${third_party}" />
    </target>

    <target name="test-compile"
            description="Compile Unit Tests."
            depends="compile, scripts-compile">

        <copy todir="${test.classes}">
            <fileset dir="${test.data.dir}" includes="**/**" />
        </copy>
                
        <!-- TODO(arjuns) : Optimize classpaths. -->
        <javac srcdir="${test.src}"
               destdir="${test.classes}"
               includeantruntime="false"
               failonerror="true"
               debug="true">
            <compilerarg line="${javac.flags}" />
            <classpath>
                <resources refid="depend_lib" />
                <resources refid="depend_test_lib" />
                <pathelement location="${classdir}" />
            </classpath>
        </javac>
    </target>

    <target name="test" description="Run unit tests" depends="test-compile">
        <junit fork="yes" printsummary="yes" failureproperty="test.failed">
            <jvmarg value="-enableassertions" />
            <classpath>
                <resources refid="depend_lib" />
                <resources refid="depend_test_lib" />
                <pathelement location="${classdir}" />
                <pathelement location="${test.classes}" />
            </classpath>
            <formatter type="plain" />
            <batchtest todir="${test.outdir}">
                <fileset dir="${test.src}">
                    <include name="**/*Tests.java" />
                </fileset>
            </batchtest>
        </junit>

        <fail message="Tests failed!">
            <condition>
                <isset property="test.failed" />
            </condition>
        </fail>
    </target>

    <target name="clean" description="Force a clean slate to rebuild">
        <delete dir="${buildir}" />
        <delete dir="${war.dir}" />
        <ant antfile="build.xml" target="clean" dir="${basedir}/${commondir}" />
        <ant antfile="build.xml" target="clean" dir="${basedir}/${xmls.dir}" />
        <ant antfile="build.xml"
             target="clean"
             dir="${basedir}/${cnxclient2.dir}" />
    </target>

    <target name="runserver"
            depends="war_qa"
            description="Run the dev_appserver">
        <dev_appserver war="${war.dir}" port="${http.port}" />
    </target>

    <target name="dev_appserver" depends="runserver" />

    <target name="debug"
            depends="war_qa"
            description="Launches dev_appserver with remote debugging enabled">
        <echo message="Launching dev_appserver on Web port ${http.port}, Java remote debug port ${debug.port}" />
        <dev_appserver war="${war.dir}" port="${http.port}">
            <options>
                <arg value="--jvm_flag=-Xdebug" />
                <arg value="--jvm_flag=-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=${debug.port}" />
            </options>
        </dev_appserver>
    </target>

    <target name="update_prod"
            depends="war_prod"
            description="Uploads the application, including indexes">
        <appcfg action="update" war="${war.dir}" />
    </target>

    <target name="update_qa"
            depends="war_qa"
            description="Uploads the application, including indexes">
        <appcfg action="update" war="${war.dir}" />
    </target>

    <target name="update_indexes_prod"
            depends="war_prod"
            description="Uploads only the application's indexes">
        <appcfg action="update_indexes" war="${war.dir}" />
    </target>

    <target name="update_indexes_qa"
            depends="war_qa"
            description="Uploads only the application's indexes">
        <appcfg action="update_indexes" war="${war.dir}" />
    </target>

    <target name="rollback_prod"
            depends="war_prod"
            description="Rolls back any in-progress application update for Production env.">
        <appcfg action="rollback" war="${war.dir}" />
    </target>

    <target name="rollback_qa"
            depends="war_qa"
            description="Rolls back any in-progress application update for QA env.">
        <appcfg action="rollback" war="${war.dir}" />
    </target>

    <target name="request_logs" description="Downloads the application's logs">
        <appcfg action="request_logs" war="${war.dir}">
            <options>
                <arg value="--num_days=${log.days}" />
            </options>
            <args>
                <arg value="${log.file}" />
            </args>
        </appcfg>
    </target>

    <target name="scripts-compile" depends="compile">
        <mkdir dir="${scripts.classes}" />
        <mkdir dir="${test.lib}" />

        <javac srcdir="${scripts.src}"
               destdir="${scripts.classes}"
               includeantruntime="false"
               debug="on"
               failonerror="true">
            <compilerarg line="${javac.flags}" />
            <classpath>
                <resources refid="depend_lib" />
                <resources refid="depend_test_lib" />
            </classpath>
        </javac>

        <jar destfile="${test.lib}/scripts.jar">
            <fileset dir="${scripts.classes}" />
            <fileset dir="${scripts.src}" />
        </jar>
    </target>

    <target name="all"
            description="Refers to all the targets in this file other then test."
            depends="compile, test-compile, war_qa, scripts-compile" />
</project>
