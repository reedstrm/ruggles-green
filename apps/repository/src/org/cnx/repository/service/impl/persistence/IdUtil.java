/*
 * Copyright (C) 2011 The CNX Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.cnx.repository.service.impl.persistence;

import static com.google.common.base.Preconditions.checkArgument;

import java.util.List;
import java.util.regex.Pattern;

import javax.annotation.Nullable;

import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.repackaged.com.google.common.collect.ImmutableList;

/**
 * Entity id utils.
 * 
 * @author Tal Dayan
 */
public class IdUtil {

    /**
     * Regex for the post prefix portion of the id. We match exactly strings that can
     * be formatted by "%04d" with numeric value >= 0. We later filter out the invalid
     * zero value.
     */
    private static final Pattern SUB_ID_PATTERN = Pattern.compile("[0-9]{4}|[1-9][0-9]{4,20}");

    /**
     * Convert key to id.
     * 
     * @param entitySpec the spec of the entity to which the key belongs.
     * @param key the key.
     */
    public static String keyToId(OrmEntitySpec entitySpec, Key key) {
        checkArgument(entitySpec.getKeyKind().equals(key.getKind()), "Non matching key type: %s",
                key);
        final long id = key.getId();
        checkArgument(id >= 1, "Invalid id: %s", key);
        return String.format("%s%04d", entitySpec.getIdPrefix(), id);
    }

    /**
     * Decode an id generated by {@link #keyToId}.
     * 
     * @param entitySpec the spec of the entity type.
     * @param id the string id
     * @return return the decoded key or null if invalid id.
     */
    @Nullable
    public static Key idToKey(OrmEntitySpec entitySpec, String id) {
        checkArgument(entitySpec.supportsIds(), "Entity spec does not supprot ids: ",
                entitySpec.getKeyKind());
        if (!id.startsWith(entitySpec.getIdPrefix())) {
            return null;
        }

        final String subId = id.substring(entitySpec.getIdPrefix().length());

        if (!SUB_ID_PATTERN.matcher(subId).matches()) {
            return null;
        }

        final long numericId;
        try {
            numericId = Long.decode(subId);
        } catch (NumberFormatException e) {
            return null;
        }

        // Appengine keys reject numeric id 0.w
        if (numericId < 1) {
            return null;
        }

        return KeyFactory.createKey(entitySpec.getKeyKind(), numericId);
    }

    public static <T extends OrmEntity> ImmutableList<String> keysToIds(Class<T> entityClass,
            List<Key> keys) {
        final OrmEntitySpec entitySpec = OrmEntity.entityClassSpec(entityClass);
        ImmutableList.Builder<String> builder = ImmutableList.builder();
        for (Key key : keys) {
            builder.add(keyToId(entitySpec, key));
        }
        return builder.build();
    }

}
