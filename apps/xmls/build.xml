<!--
    Copyright (C) 2011 The CNX Authors
    
    Licensed under the Apache License, Version 2.0 (the "License"); you may not
    use this file except in compliance with the License. You may obtain a copy of
    the License at
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and limitations under
    the License.
-->

<project name="xmls" default="jar">
    <!-- TODO(arjuns) : Move this to a separate directory. -->
    <description> Contains RelaxNG definitions for Connexions Repository. </description>
    <property file="local.properties" />
    <property file="build.properties" />

    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

    <property name="target_dir" value="${basedir}/${output.jars}" />

    <target name="rng2xsd2java" description="This target compiles rng to xsd">
        <mkdir dir="${gen.resources}" />
        <!-- Convert rng to xsd. -->
        <if>
            <available file="${gen.resources}/resource-mapping.xsd" />
            <then>
                <echo message="WARNING : ${gen.resources}/resource-mapping.xsd already exists." />
            </then>
            <else>
                <java jar="${trangjarpath}" fork="true" failonerror="true">
                    <arg line="-I rng ${rngs.dir}/resource-mapping.rng.xml ${gen.resources}/resource-mapping.xsd" />
                </java>

                <!-- Compiling xsd to java classes. -->
                <mkdir dir="${gen.java.files}" />
                <java jar="${basedir}/${third_party}/jaxb/jaxb-ri-20100511/lib/jaxb-xjc.jar"
                      fork="true"
                      failonerror="true">
                    <arg line="-verbose -d ${gen.java.files} -p 
                        org.cnx.resourcemapping ${gen.resources}/resource-mapping.xsd" />
                </java>
            </else>
        </if>

        <if>
            <available file="${gen.resources}/atompub-resource-entry.xsd" />
            <then>
                <echo message="WARNING : ${gen.resources}/atompub-resource-entry.xsd already exists." />
            </then>
            <else>
                <java jar="${trangjarpath}" fork="true" failonerror="true">
                    <arg line="-I rng ${rngs.dir}/atompub-resource-entry.rng.xml ${gen.resources}/atompub-resource-entry.xsd" />
                </java>

                <mkdir dir="${gen.java.files}" />
                <!-- Compiling xsd to java classes. -->
                <java jar="${basedir}/${third_party}/jaxb/jaxb-ri-20100511/lib/jaxb-xjc.jar"
                      fork="true"
                      failonerror="true">
                    <arg line="-verbose -d ${gen.java.files} -p 
                     org.cnx.resourceentry ${gen.resources}/atompub-resource-entry.xsd" />
                </java>
            </else>
        </if>
    </target>

    <fileset id="depend_lib" dir="${output.jars}" includes="*.jar" />
    <target name="compile"
            description="Compile the application servlet code"
            depends="rng2xsd2java">
        <mkdir dir="${classdir}" />
        <mkdir dir="${output.jars}" />

        <javac srcdir="${gen.java.files}"
               destdir="${classdir}"
               includeantruntime="false"
               debug="on">
            <compilerarg line="${javac.flags}" />
            <classpath>
                <resources refid="depend_lib" />
            </classpath>
        </javac>
    </target>

    <target name="clean" description="Force a clean slate to rebuild">
        <delete dir="${buildir}" />
    </target>

    <tstamp>
        <format property="timenow" pattern="ddMMyyyyHHmm" />
    </tstamp>

    <property name="client-jar-name" value="org.cnx.xmlschema" />
    <property name="dest-client-jar"
              value="${libdir}/${client-jar-name}.${timenow}.jar" />

    <target name="jar"
            description="Build jar for resourcemapping classes."
            depends="compile">
        <jar destfile="${dest-client-jar}">
            <fileset dir="${classdir}" />
            <fileset dir="${gen.java.files}" />
        </jar>
    </target>

    <!--TODO(arjuns) : Add timestamp inside Manifest for jars. -->
    <target name="copyjar"
            description="Copy jar to calling Build file."
            depends="jar">
        <copy file="${dest-client-jar}"
              tofile="${target_dir}/${client-jar-name}.latest.jar" />
    </target>

    <target name="all"
            description="Refers to all the targets in this file other then test."
            depends="compile" />
</project>
